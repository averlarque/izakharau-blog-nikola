<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ilya Zakharau's Blog (Posts about API)</title><link>https://izakharau.me/</link><description></description><atom:link href="https://izakharau.me/categories/cat_api.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2022 &lt;a href="mailto:ilya.zakharau@gmail.com"&gt;Ilya Zakharau&lt;/a&gt; 
&lt;a rel="license" href="https://creativecommons.org/licenses/by-nc-sa/4.0/"&gt;
&lt;img alt="Creative Commons License BY-NC-SA"
style="border-width:0; margin-bottom:12px;"
src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"&gt;&lt;/a&gt;</copyright><lastBuildDate>Sun, 25 Dec 2022 16:08:56 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>“Backward awkwardability” or how to break compatibility and stop worrying</title><link>https://izakharau.me/posts/backward-compatibility/</link><dc:creator>Ilya Zakharau</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;img src="https://izakharau.me/images/breaking_changes.jpeg" width="90%" alt="Breaking changes everywhere" style="vertical-align:middle;margin:1% 1%"&gt;&lt;br&gt;
When you are responsible for services widely used by other teams inside and partners outside, you most likely become paranoid about maintaining backward compatibility of your API as much as possible. I had no idea about what backward compatibility means in terms of software engineering until I started working on microservices. Those microservices were important for the organization’s success. And in the same time that was a highly volatile environment with rapidly growing functionality and direction changes on the fly.&lt;/p&gt;
&lt;p&gt;Back then, I invented the term “backward awkwardability”: when you feel awkward while telling your customers that an upcoming release is not compatible with a previous so they have some work to do. They say something like: “C’mon guys, you introduced breaking changes just a few iterations before! What’s going on?” Ugh, each time I feel sick just remembering those situations.&lt;/p&gt;
&lt;p&gt;So we are going to talk about the nature of backward compatibility and how to deal with the breaking changes in terms of API.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://izakharau.me/posts/backward-compatibility/"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>https://izakharau.me/posts/backward-compatibility/</guid><pubDate>Mon, 26 Apr 2021 13:30:00 GMT</pubDate></item><item><title>Definition of API requirements</title><link>https://izakharau.me/posts/definition-of-api-requirements/</link><dc:creator>Ilya Zakharau</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;img src="https://izakharau.me/images/api.jpg" width="90%" alt="API" style="vertical-align:middle;margin:1% 1%"&gt;&lt;br&gt;
At some point in my career, I faced a need to specify requirements for API. Those were not typical solution requirements I worked on before. I learned about the API layer which is very common among the enterprise systems. It can hide a set of microservices or a legacy system from the outer world. Like any other system, it is also impacted by stakeholders' needs. And those needs have to be translated into requirements.&lt;/p&gt;
&lt;p&gt;We are going to decompose the definition of API requirements and see what lies within. I will pay your attention to what should be taken into consideration for the API layer. It is an introduction to this topic as there are other sides of it to explore further.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://izakharau.me/posts/definition-of-api-requirements/"&gt;Read more…&lt;/a&gt; (10 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>https://izakharau.me/posts/definition-of-api-requirements/</guid><pubDate>Tue, 30 Mar 2021 06:00:00 GMT</pubDate></item></channel></rss>